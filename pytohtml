import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from IPython.display import HTML, display
import webbrowser
import os

# Save the HTML to a file
html_path = "defect_results.html"
with open(html_path, "w", encoding="utf-8") as f:
    f.write(html_output)

# Open the saved file in the default browser
webbrowser.open('file://' + os.path.realpath(html_path))


# Load the historical defect data with error handling for CSV parsing issues
try:
    # Adding error_bad_lines=False (renamed to on_bad_lines='skip' in newer pandas versions)
    if pd.__version__ >= '1.3.0':
        df = pd.read_csv("defects.csv", on_bad_lines='skip')  # For newer pandas versions
    else:
        df = pd.read_csv("defects.csv", error_bad_lines=False)  # For older pandas versions
    
    print(f"Loaded {len(df)} rows. Some rows may have been skipped due to parsing errors.")
except Exception as e:
    print(f"Error loading CSV: {e}")
    print("Alternative approach: Try opening and fixing the CSV file in a text editor or Excel.")

# Continue with the rest of the code if the CSV loaded
df = df.dropna(subset=["Description"])

# Vectorize the issue descriptions
vectorizer = TfidfVectorizer(stop_words='english')
tfidf_matrix = vectorizer.fit_transform(df['Description'])

# Function to find similar issues with duplicate filtering
def find_similar_issues(user_input, top_n=3, similarity_threshold=0.95):
    user_tfidf = vectorizer.transform([user_input])
    cosine_sim = cosine_similarity(user_tfidf, tfidf_matrix).flatten()
    
    # Get all indices sorted by similarity
    sorted_indices = cosine_sim.argsort()[::-1]
    
    # Filter to keep only unique content
    unique_issues = []
    seen_descriptions = set()
    
    for idx in sorted_indices:
        description = df.iloc[idx]['Description']
        # Create a simplified version for comparison (lowercase, trimmed)
        simple_desc = description.lower().strip()
        
        # Skip if we've seen a very similar description or if similarity is too low
        if simple_desc in seen_descriptions or cosine_sim[idx] < 0.01:
            continue
            
        # Check if this issue is too similar to any we've already added
        too_similar = False
        for existing_idx in unique_issues:
            existing_desc = df.iloc[existing_idx]['Description']
            # If descriptions are very similar based on simple string comparison
            if cosine_similarity(
                vectorizer.transform([description]), 
                vectorizer.transform([existing_desc])
            )[0][0] > similarity_threshold:
                too_similar = True
                break
                
        if not too_similar:
            unique_issues.append(idx)
            seen_descriptions.add(simple_desc)
            
        # Stop once we have enough unique issues
        if len(unique_issues) >= top_n:
            break
    
    # Prepare the data for the table
    result_data = []
    
    for i, idx in enumerate(unique_issues):
        issue_data = {
            "Issue Key": df.iloc[idx].get('Issue key', 'N/A'),
            "Summary": df.iloc[idx].get('Summary', 'N/A'),
            "Status": df.iloc[idx].get('Status', 'N/A'),
            "Fix Version": df.iloc[idx].get('Fix Version', 'N/A'),
            "Severity": df.iloc[idx].get('Severity', 'N/A'),
            "Description": df.iloc[idx]['Description'],
            "Resolution": df.iloc[idx].get('Comment', 'N/A'),
            "Similarity Score": f"{cosine_sim[idx]:.2f}"
        }
        result_data.append(issue_data)
    
    # Create a DataFrame from the result data
    result_df = pd.DataFrame(result_data)
    
    # Convert the DataFrame to HTML
    html_output = result_df.to_html(index=False, escape=False, classes='table table-striped table-bordered', justify='center')
    
    # Wrap the HTML output with a nice container for better display
    html_output = f"""
    <html>
    <head>
        <title>Defect Assistant - Similar Issues</title>
        <style>
            body {{
                font-family: Arial, sans-serif;
                margin: 30px;
                padding: 20px;
            }}
            h3 {{
                color: #4CAF50;
            }}
            table {{
                width: 100%;
                border-collapse: collapse;
                margin: 20px 0;
            }}
            th, td {{
                padding: 12px;
                text-align: left;
                border: 1px solid #ddd;
            }}
            th {{
                background-color: #f2f2f2;
            }}
            tr:nth-child(even) {{
                background-color: #f9f9f9;
            }}
        </style>
    </head>
    <body>
        <h3>üîç Top similar past issues:</h3>
        {html_output}
    </body>
    </html>
    """
    
    # Display the HTML output directly in the browser (using IPython display)
    display(HTML(html_output))

# üîé Example usage - only call the function once
user_query = input("Enter your current defect description:\n> ")
find_similar_issues(user_query)
