import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import webbrowser
import os

# Load defect data from CSV
try:
    if pd.__version__ >= '1.3.0':
        df = pd.read_csv("defects.csv", on_bad_lines='skip')
    else:
        df = pd.read_csv("defects.csv", error_bad_lines=False)
    print(f"‚úÖ Loaded {len(df)} rows from CSV.")
except Exception as e:
    print(f"‚ùå Error loading CSV: {e}")
    exit()

# Drop rows without description
df = df.dropna(subset=["Description"])

# TF-IDF vectorizer
vectorizer = TfidfVectorizer(stop_words='english')
tfidf_matrix = vectorizer.fit_transform(df['Description'])

# Function to find similar issues
def find_similar_issues(user_input, top_n=3, similarity_threshold=0.95):
    user_tfidf = vectorizer.transform([user_input])
    cosine_sim = cosine_similarity(user_tfidf, tfidf_matrix).flatten()
    sorted_indices = cosine_sim.argsort()[::-1]

    unique_issues = []
    seen_descriptions = set()

    for idx in sorted_indices:
        description = df.iloc[idx]['Description'].lower().strip()
        if description in seen_descriptions or cosine_sim[idx] < 0.01:
            continue

        too_similar = False
        for existing_idx in unique_issues:
            existing_desc = df.iloc[existing_idx]['Description']
            if cosine_similarity(
                vectorizer.transform([description]),
                vectorizer.transform([existing_desc])
            )[0][0] > similarity_threshold:
                too_similar = True
                break

        if not too_similar:
            unique_issues.append(idx)
            seen_descriptions.add(description)

        if len(unique_issues) >= top_n:
            break

    # Build HTML output
    html = """
    <html>
    <head>
        <title>Defect Assistant Results</title>
        <style>
            body { font-family: Arial; margin: 40px; background: #f9f9f9; }
            table { border-collapse: collapse; width: 100%; background: white; }
            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
            th { background-color: #4CAF50; color: white; }
            tr:nth-child(even) { background-color: #f2f2f2; }
            h2 { color: #333; }
        </style>
    </head>
    <body>
        <h2>üîç Top Similar Defects</h2>
        <table>
            <tr>
                <th>#</th>
                <th>Issue Key</th>
                <th>Summary</th>
                <th>Status</th>
                <th>Fix Version</th>
                <th>Severity</th>
                <th>Description</th>
                <th>Resolution</th>
                <th>Similarity</th>
            </tr>
    """

    for i, idx in enumerate(unique_issues):
        row = df.iloc[idx]
        html += f"<tr><td>{i+1}</td>"
        html += f"<td><a href='https://github.com/rajeshsureshthakur/Rep_01/{row.get('Issue key', '')}' target='_blank'>{row.get('Issue key', '')}</a></td>"
        html += f"<td>{row.get('Summary', '')}</td>"
        html += f"<td>{row.get('Status', '')}</td>"
        html += f"<td>{row.get('Fix Version', '')}</td>"
        html += f"<td>{row.get('Severity', '')}</td>"
        html += f"<td>{row.get('Description', '')}</td>"
        html += f"<td>{row.get('Comment', '')}</td>"
        html += f"<td>{cosine_sim[idx]:.2f}</td></tr>"

    html += "</table></body></html>"
    return html

# üîé Run from CMD
if __name__ == "__main__":
    user_query = input("üîß Enter defect description:\n> ")
    html_output = find_similar_issues(user_query)

    # Save and open the result
    output_file = "defect_results.html"
    with open(output_file, "w", encoding="utf-8") as f:
        f.write(html_output)
    webbrowser.open('file://' + os.path.realpath(output_file))
