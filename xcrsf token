import javax.net.ssl.*;
import java.security.cert.X509Certificate;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.security.SecureRandom;
import java.util.Base64;
import java.util.List;
import java.util.Map;

public class RestUIWidgetFetcher {
    private final String controllerUrl;
    private final String username;
    private final String password;
    private final String accountName;
    private final HttpClient httpClient;
    private String csrfToken;
    private Map<String, List<String>> sessionCookies;

    public RestUIWidgetFetcher(String controllerUrl, String username, 
                             String password, String accountName) throws Exception {
        this.controllerUrl = controllerUrl;
        this.username = username;
        this.password = password;
        this.accountName = accountName;

        TrustManager[] trustAllCerts = new TrustManager[]{
            new X509TrustManager() {
                public X509Certificate[] getAcceptedIssuers() { return null; }
                public void checkClientTrusted(X509Certificate[] certs, String authType) { }
                public void checkServerTrusted(X509Certificate[] certs, String authType) { }
            }
        };

        SSLContext sslContext = SSLContext.getInstance("TLS");
        sslContext.init(null, trustAllCerts, new SecureRandom());

        SSLParameters sslParameters = new SSLParameters();
        sslParameters.setEndpointIdentificationAlgorithm(null);

        this.httpClient = HttpClient.newBuilder()
            .version(HttpClient.Version.HTTP_2)
            .sslContext(sslContext)
            .sslParameters(sslParameters)
            .followRedirects(HttpClient.Redirect.NORMAL)
            .build();
    }

    private String getAuthHeader() {
        String auth = username + "@" + accountName + ":" + password;
        return "Basic " + Base64.getEncoder().encodeToString(auth.getBytes());
    }

    // Initialize session and get CSRF token
    private void initializeSession() throws Exception {
        // First, get the CSRF token
        String loginUrl = controllerUrl + "/controller/auth?action=login";
        
        HttpRequest loginRequest = HttpRequest.newBuilder()
            .uri(URI.create(loginUrl))
            .header("Authorization", getAuthHeader())
            .GET()
            .build();

        HttpResponse<String> loginResponse = httpClient.send(loginRequest, 
            HttpResponse.BodyHandlers.ofString());

        // Store cookies and headers
        sessionCookies = loginResponse.headers().map();
        
        // Get CSRF token from cookies or headers
        sessionCookies.forEach((key, values) -> {
            System.out.println("Header: " + key + " = " + values);
        });

        // Make a request to get CSRF token
        String csrfUrl = controllerUrl + "/controller/restui/csrf/token";
        
        HttpRequest csrfRequest = HttpRequest.newBuilder()
            .uri(URI.create(csrfUrl))
            .header("Authorization", getAuthHeader())
            .GET()
            .build();

        HttpResponse<String> csrfResponse = httpClient.send(csrfRequest, 
            HttpResponse.BodyHandlers.ofString());
        
        csrfToken = csrfResponse.body().replace("\"", "");
        System.out.println("CSRF Token: " + csrfToken);
    }

    public void fetchWidgetData(int applicationId, String dashboardId, String widgetId) {
        try {
            // Initialize session first
            initializeSession();

            String url = controllerUrl + "/controller/restui/dashboards/widgetData";
            
            String jsonPayload = "{"
                + "\"widgetId\":\"" + widgetId + "\","
                + "\"dashboardId\":\"" + dashboardId + "\","
                + "\"appId\":" + applicationId + ","
                + "\"accountId\":\"" + accountName + "\","
                + "\"visualization\":{"
                + "    \"type\":\"METRIC_GRAPH\","
                + "    \"visualization\":{"
                + "        \"graphType\":\"LINE\""
                + "    }"
                + "},"
                + "\"timeRangeString\":\"last_1_hour.BEFORE_NOW.-1.-1.60\","
                + "\"timeRangeStart\":" + (System.currentTimeMillis() - 3600000) + ","
                + "\"timeRangeEnd\":" + System.currentTimeMillis() + ","
                + "\"dataFetchMode\":\"METRIC_GRAPH\","
                + "\"applicationIds\":[" + applicationId + "]"
                + "}";

            System.out.println("\nMaking request to:");
            System.out.println("URL: " + url);
            System.out.println("\nPayload:");
            System.out.println(formatJson(jsonPayload));

            // Build request with CSRF token and session cookies
            HttpRequest.Builder requestBuilder = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .header("Authorization", getAuthHeader())
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .header("X-CSRF-TOKEN", csrfToken);

            // Add any session cookies
            if (sessionCookies != null && sessionCookies.containsKey("Set-Cookie")) {
                requestBuilder.header("Cookie", String.join("; ", sessionCookies.get("Set-Cookie")));
            }

            HttpRequest request = requestBuilder
                .POST(HttpRequest.BodyPublishers.ofString(jsonPayload))
                .build();

            HttpResponse<String> response = httpClient.send(request, 
                HttpResponse.BodyHandlers.ofString());

            System.out.println("\nResponse:");
            System.out.println("Status Code: " + response.statusCode());
            System.out.println("Response Headers:");
            response.headers().map().forEach((key, values) -> {
                System.out.println(key + ": " + values);
            });
            System.out.println("\nResponse Body:");
            System.out.println(formatJson(response.body()));

        } catch (Exception e) {
            System.err.println("\nError occurred:");
            System.err.println("Message: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private String formatJson(String json) {
        if (json == null || json.isEmpty()) return "";
        
        StringBuilder formatted = new StringBuilder();
        int indent = 0;
        boolean inQuotes = false;

        for (char c : json.toCharArray()) {
            switch (c) {
                case '{':
                case '[':
                    formatted.append(c).append("\n").append("  ".repeat(++indent));
                    break;
                case '}':
                case ']':
                    formatted.append("\n").append("  ".repeat(--indent)).append(c);
                    break;
                case '"':
                    inQuotes = !inQuotes;
                    formatted.append(c);
                    break;
                case ',':
                    formatted.append(c);
                    if (!inQuotes) formatted.append("\n").append("  ".repeat(indent));
                    break;
                default:
                    formatted.append(c);
            }
        }
        return formatted.toString();
    }

    public static void main(String[] args) {
        try {
            String controllerUrl = "https://your-controller.example.com";
            String username = "your-username";
            String password = "your-password";
            String accountName = "your-account";
            int applicationId = 123;
            String dashboardId = "your-dashboard-id";
            String widgetId = "your-widget-id";

            RestUIWidgetFetcher fetcher = new RestUIWidgetFetcher(
                controllerUrl,
                username,
                password,
                accountName
            );

            fetcher.fetchWidgetData(
                applicationId,
                dashboardId,
                widgetId
            );

        } catch (Exception e) {
            System.err.println("Error in main: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
